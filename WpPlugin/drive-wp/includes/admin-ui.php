<?php
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class WpDriveUI {
	private $wordpress_drive_options;
	private $mod_media_role;
	private $mod_media_cap;

	public function __construct($mod_media_role,$mod_media_cap) {
		$this->mod_media_role=$mod_media_role;
		$this->mod_media_cap=$mod_media_cap;
		
		add_action( 'admin_menu', array( $this, 'wordpress_drive_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'wordpress_drive_page_init' ) );
		
		add_filter( 'plugin_action_links', array( $this, 'add_settings_link' ), 10, 2 );
	}

	public function wordpress_drive_add_plugin_page() {
		add_plugins_page(
			__('Wp Drive','wp-drive'), // page_title
			__('Wp Drive','wp-drive'), // menu_title
			'manage_options', // capability
			'wp-drive', // menu_slug
			array( $this, 'wordpress_drive_create_admin_page' ) // function
		);
	}
	
	/**
	 * Add a link to the settings on the Plugins screen.
	 */
	public  function add_settings_link( $links, $file ) {
		if($file == "wp-drive/wp-drive.php")
		{
		  $settings_link = '<a href="plugins.php?page=wp-drive.php">' . __('Settings') . '</a>'; 
		  array_unshift($links, $settings_link); 
		}
		
		return $links; 		
	}

	public function wordpress_drive_create_admin_page() {
		$this->wordpress_drive_options = get_option( 'wordpress_drive_option_name' ); ?>

		<div class="wrap">
			<h2><?php _e('Wp Drive','wp-drive'); ?></h2>
			<p></p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'wordpress_drive_option_group' );
					do_settings_sections( 'wordpress-drive-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function wordpress_drive_page_init() {
		register_setting(
			'wordpress_drive_option_group', // option_group
			'wordpress_drive_option_name', // option_name
			array( $this, 'wordpress_drive_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'wordpress_drive_setting_section', // id
			__('Settings'), // title
			array( $this, 'wordpress_drive_section_info' ), // callback
			'wordpress-drive-admin' // page
		);

		add_settings_field(
			'use_capability_cb', // id
			__('Restrict modify media','wp-drive'), // title
			array( $this, 'use_capability_cb_callback' ), // callback
			'wordpress-drive-admin', // page
			'wordpress_drive_setting_section' // section
		);
		
		add_settings_field(
			'post_types_select', // id
			__('Select custom post types that are populated to WordpressDrive/REST API','wp-drive'), // title
			array( $this, 'post_types_select_callback' ), // callback
			'wordpress-drive-admin', // page
			'wordpress_drive_setting_section' // section
		);

	}

	public function wordpress_drive_sanitize($input) {
		$sanitary_values = array();

		if ( isset( $input['post_types_select'] ) ) {
			$sanitary_values['post_types_select'] = $input['post_types_select'];
		}

		if($this->AddModMediaRole(isset( $input['use_capability_cb'] )))
		{
			if ( isset( $input['use_capability_cb'] ) ) {
				$sanitary_values['use_capability_cb'] = $input['use_capability_cb'];
			}
		}
		
		return $sanitary_values;
	}

	public function wordpress_drive_section_info() {
		
	}

	public function AddModMediaRole($isAdd)
	{
		if($isAdd && get_role($this->mod_media_role) != null) return true;
		if(!$isAdd && get_role($this->mod_media_role) == null) return true;
		
		if($isAdd)
		{
			$role = add_role( $this->mod_media_role, 'Modify Media');
			if($role == null) return false;
			$role->add_cap( $this->mod_media_cap );			
		}
		else
		{
			$this->DeleteCapability($this->mod_media_cap);
			remove_role($this->mod_media_role);
		}
		
		return true;
	}
	
	public function DeleteCapability($cap)
	{
		global $wp_roles;
		
		foreach (array_keys($wp_roles->roles) as $role) 
		{
		  $wp_roles->remove_cap($role, $cap);
		}
		
	}
	
	public function post_types_select_callback() {
		$rest_post_types=get_post_types(array("show_in_rest" => true),'objects');
		
		if(!empty($this->wordpress_drive_options['post_types_select']) && is_array($this->wordpress_drive_options['post_types_select'])) {
			$rest_post_types=array_filter($rest_post_types,function($post_type) {
				return !in_array($post_type->name, $this->wordpress_drive_options['post_types_select']);
			});
		}
		
		$post_types=get_post_types(array( "_builtin" => false),'objects');

		$post_types=array_filter($post_types,function($post_type) use($rest_post_types) {
			return !in_array($post_type,$rest_post_types);
		});
		
		if(!empty($post_types)) {
			?> <select name="wordpress_drive_option_name[post_types_select][]" id="post_types_select" size="<?php echo count($post_types) ?>" style="height: 100%; padding-bottom: 0.5em; padding-top: 0.5em;" multiple> <?php
			foreach($post_types as $post_type)
			{
				$selected=(isset( $this->wordpress_drive_options['post_types_select'] ) && in_array($post_type->name, $this->wordpress_drive_options['post_types_select'])) ? 'selected' : '' ;
				echo "<option {$selected} value='{$post_type->name}'>{$post_type->label}</option>";
			}
			echo "</select>";
		}

		echo "<p><b>" . __('Already populated post types (by system)','wp-drive') . "</b></p><p>";
		foreach($rest_post_types as $post_type)
		{
			echo $post_type->label . ", ";
		}
		echo "</p>";
	}

	public function use_capability_cb_callback() {
		printf(
			'<input type="checkbox" name="wordpress_drive_option_name[use_capability_cb]" id="use_capability_cb" value="use_capability_cb" %s>',
			( isset( $this->wordpress_drive_options['use_capability_cb'] ) && $this->wordpress_drive_options['use_capability_cb'] === 'use_capability_cb' ) ? 'checked' : ''
		);
		echo "<p style='max-width: 650px;' >" . __("If this checkbox is selected, the ability to modify media files by WordpressDrive is only allowed to users, which have the Role <b>'Modify Media'</b> (modifymedia) and/or the capability <b>'modify_media'</b> enabled.",'wp-drive') . "</p>";
	}

}

?>